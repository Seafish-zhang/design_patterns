/**
 * Description: 结构型模式(Structural Pattern)描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。
 * <p>
 * 代理、桥接、装饰、适配器4种设计模式的区别
 * <p>
 * 这四种模式是比较常用的结构型设计模式。它们的代码结构非常类似，都是通过Wrapper类二次封装原始类。
 * <p>
 * 但是4种设计模式的用意完全不同，要解决的问题和应用场景不同
 * <p>
 * 代理模式是在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能这是它跟装饰模式最大的不同.
 * <p>
 * 桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、相对独立地加以改变.
 * <p>
 * 装饰模式是在不改变原始类接口的条件下，为原始类功能进行增强，并且支持多个装饰器的嵌套使用.
 * <p>
 * 适配器模式是一种事后补救策略，适配器提供跟原始类不同的接口，而代理模式，装饰模式提供的都是跟原始类相同的接口.
 * <p>
 * <p>
 * 结构型模式分为以下 7 种：
 * <p>
 * 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
 * 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
 * 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。
 * 装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
 * 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。
 *
 * @author zhy
 * @date 2020/5/25
 */
package com.colin.structural;